name: Version Bump and Deploy

on:
  push:
    branches:
      - master

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install bump2version

      - name: Get Labels of Last Merged PR
        id: get-labels
        run: |
          last_commit=$(git log -1 --pretty=format:"%H")
          labels=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/commits/$last_commit/pulls" | \
          jq -r '.[0].labels[].name')
          echo "Labels found: $labels"
          echo "labels=$labels" >> $GITHUB_ENV

      - name: Determine Version Bump
        id: bump
        run: |
          if [[ "${{ env.labels }}" == *"bugfix"* ]]; then
            echo "bump_type=patch" >> $GITHUB_ENV
          elif [[ "${{ env.labels }}" == *"feature"* ]]; then
            echo "bump_type=minor" >> $GITHUB_ENV
          elif [[ "${{ env.labels }}" == *"major"* ]]; then
            echo "bump_type=major" >> $GITHUB_ENV
          else
            echo "No valid label found for version bump."
            exit 1

      - name: Bump Version
        if: env.bump_type != ''
        run: bump2version ${{ env.bump_type }}

      - name: Push Changes
        if: env.bump_type != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git push --follow-tags

  deploy:
    needs: bump-version
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies for deployment
        run: |
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*
